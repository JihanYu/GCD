}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
mu1
std.err1
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
knitr::opts_chunk$set(echo=FALSE, fig.align = "center", message=FALSE, warning=FALSE, cache=TRUE)
library(shiny)
shinyUI(fluidPage(
titlePanel("Sample size, Power calculation - 2 dichotomous groups(t-test)"),
sidebarLayout(
sidebarPanel(
h3("Statistical parameters"),
sliderInput("a", "alpha:", min=0.001, max=1, value=0.05),
sliderInput("b", "beta:", min=0, max=1, value=0.2),
h3("Distribution parameters"),
numericInput("mu0", "Mean of H0: ", value=0),
numericInput("std.dev0", "Stand dev of H0: ", value=1),
numericInput("std.dev1", "Stand dev of H1: ", value=1),
numericInput("effect.size", "Effect size: ", value=0.5),
numericInput("n1", "sample number(H1): - if determined", value=NULL),
numericInput("n1.n0", "ratio of number(H1/H0): ", value=1),
checkboxInput("one.two", "2 sided test", value=TRUE),
submitButton("Submit")
),
mainPanel(
plotOutput("dispPlot"),
verbatimTextOutput("print.cal.sample.n"),
verbatimTextOutput("print.prov.sample.n"),
verbatimTextOutput("print.power")
)
)
))
library(shiny);  library(ggplot2)
shinyServer(function(input, output) {
mu1 <- reactive({ input$mu0 + input$effect.size })
two.sided <- reactive({
if(input$one.two == TRUE){ 2 } else{ 1 }
})
za <- reactive({ qnorm(input$a/two.sided(), lower.tail=FALSE) })
zb <- reactive({ qnorm(input$b, lower.tail=FALSE) })
q12 <- reactive({
if(input$n1.n0 >= 1){ 1 + 1/input$n1.n0 } else{ 1 + input$n1.n0 }
})
est.sample.size <- reactive({
( (za() + zb())^2 * input$std.dev0^2 * q12() ) / (input$effect.size^2)
})
n1.new <- reactive({
if(is.na(input$n1)){ est.sample.size() } else{ input$n1 }
})
n0 <- reactive({ n1.new()/input$n1.n0 })
std.err0 <- reactive({ input$std.dev0/sqrt(n0()/2) })
std.err1 <- reactive({ input$std.dev1/sqrt(n1.new()/2) })
power.b <- reactive({
pnorm( qnorm(input$a/two.sided(), mean=input$mu0, sd=std.err0(), lower.tail=FALSE),
mean=mu1(), sd=std.err1(), lower.tail=FALSE)
})
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='0zhbiQTbLDfBsQmB6AN3xrFJyYoEubCPV0Uc52Cw')
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
?iris
?devtools
??devtools
library(devtools)
install.packages("devtools")
library(devtools)
?aes
?install_github
session.info()
sessioninfo()
SESSIONINFO()
session_info()
install.packages("KernSmooth")
library(KernSmooth)
sessionInfo()
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillNA <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep(NA, 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillNA)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
dim(meanstd.data)
dim(total.data)
dim(df.features)
head(df.features)
head9activity)
head(activity)
head(names(meanstd.data))
head(subject_train)
head(y_train)
levels(as.factor(y_train))
as.numeric(y_train)
head(y_train)
class(y_train)
class(y_train[,1])
y_train[,1]
as.numeric(y_train[,1])
levels(as.factor(y_train[,1]))
activity
str(meanstd.data)
head(str(meanstd.data))
str(meanstd.data[,1:5])
dim(meanstd.data)
dim(meanstd.id)
length(meanstd.id)
df.features[, meanstd.id]
meanstd.id
dim(df.features)
head(df.features)
df.features[meanstd.id,]
dim(features)
features[meanstd.id,]
rm(list=ls())
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillNA <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillNA)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
a <- data.frame(c(1:5), c(6:10), c(11:15), c(16:20))
a
names(a) <- c("1", "2")
a
dim(meanstd.data)
dim(df.features)
length(meanstd.id)
df.features[meanstd.id,]
head(as.numeric(meanstd.data[,2]))
activity
str(activity)
str(meanstd.data)
a <- sapply(meanstd.data, as.numeric)
str(a)
dim(a)
dim(meanstd.data)
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data <- sapply(meanstd.data, as.numeric)
activity[,1] <- as.numeric(activity[,1])
activity
str(activity)
activity[,1] == meanstd.data[,2]
which(activity[,1] == meanstd.data[,2])
which(meanstd.data[,2] == activity[,1])
meanstd.data[,2]
activity
activity[,2][meanstd.data[,2]]
head(activity[,2][meanstd.data[,2]])
head(meanstd.data[,2])
activity
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
head(meanstd.data[,2])
colnames(meanstd.data) <- c("Subject", "Activity", features[,2][meanstd.id])
head(meanstd.data)
str(meanstd.data)
str(meanstd.data[c(3:6)])
str(meanstd.data[,c(3:6)])
rm(list=ls())
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillNA <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillNA)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data <- sapply(meanstd.data, as.numeric)
activity[,1] <- as.numeric(activity[,1])
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
colnames(meanstd.data) <- c("Subject", "Activity", features[,2][meanstd.id])
head(meanstd.data)
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillNA <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillNA)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data <- sapply(meanstd.data, as.numeric)
activity[,1] <- as.numeric(activity[,1])
head(meanstd.data)
str(meanstd.data)
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
head(meanstd.data)
rm(list=ls())
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillND <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillND)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data[,2] <- as.numeric(meanstd.data[,2])
activity[,1] <- as.numeric(activity[,1])
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
meanstd.data <- sapply(meanstd.data[,-2], as.numeric)
colnames(meanstd.data) <- c("Subject", "Activity", features[,2][meanstd.id])
head(meanstd.data)
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillND <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillND)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data[,2] <- as.numeric(meanstd.data[,2])
activity[,1] <- as.numeric(activity[,1])
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
meanstd.data[,-2] <- sapply(meanstd.data[,-2], as.numeric)
colnames(meanstd.data) <- c("Subject", "Activity", features[,2][meanstd.id])
head(meanstd.data)
dim(meanstd.data)
length(meanstd.id)
dim(total.data)
library(reshape2)
data.long <- melt(meanstd.data, id.var=c("Subject", "Activity"),
variable.name="variable", value.name="score")
ave.data <- dcast(data.long, Subject + Activity ~ variable, mean, value.var="score")
write.table(ave.data, "./data/result.ave.txt", sep=",", row.names=FALSE)
rm(list=ls())
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillND <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillND)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data[,2] <- as.numeric(meanstd.data[,2])
activity[,1] <- as.numeric(activity[,1])
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
meanstd.data[,-2] <- sapply(meanstd.data[,-2], as.numeric)
colnames(meanstd.data) <- c("Subject", "Activity", features[,2][meanstd.id])
library(reshape2)
data.long <- melt(meanstd.data, id.var=c("Subject", "Activity"),
variable.name="variable", value.name="score")
ave.data <- dcast(data.long, Subject + Activity ~ variable, mean, value.var="score")
write.table(ave.data, "./data/result.ave.csv", sep=",", row.names=FALSE)
rm(list=ls())
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
activity <- read.table("./data/activity_labels.txt", colClasses="character")
x_train <- read.table("./data/train/X_train.txt", colClasses="character")
y_train <- read.table("./data/train/Y_train.txt", colClasses="character")
subject_train <- read.table("./data/train/subject_train.txt", colClasses="character")
train_data <- cbind(subject_train, y_train, x_train)
x_test <- read.table("./data/test/X_test.txt", colClasses="character")
y_test <- read.table("./data/test/Y_test.txt", colClasses="character")
subject_test <- read.table("./data/test/subject_test.txt", colClasses="character")
test_data <- cbind(subject_test, y_test, x_test)
train.data <- cbind(subject_train, y_train, x_train)
test.data <- cbind(subject_test, y_test, x_test)
total.data <- rbind(train.data, test.data)
total.data <- total.data[order(total.data[,1], total.data[,2]),]
features <- read.table("./data/features.txt", colClasses="character")
t.f <- c(rep("t", 265), rep("f", 554-265), rep("angle", 7))
features[,2][1:554] <- substring(features[,2][1:554], first=2)
feat.split <- strsplit(features[,2], split="-")
fillND <- function(x){
len.x <- length(x)
if(len.x <3){
x <- c(x, rep("not defined", 3-len.x))
}
return(x)
}
df.features <- data.frame( features[,1], t.f,
matrix(unlist(lapply(feat.split, fillND)), ncol=3, byrow=TRUE) )
names(df.features) <- c("num", "t.f", "name", "variable", "axis")
mean.id <- which(df.features$variable=="mean()")
std.id <- which(df.features$variable=="std()")
meanstd.id <- sort(c(mean.id, std.id))
meanstd.data <- total.data[, c(1, 2, meanstd.id+2)]
meanstd.data[,2] <- as.numeric(meanstd.data[,2])
activity[,1] <- as.numeric(activity[,1])
meanstd.data[,2] <- activity[,2][meanstd.data[,2]]
meanstd.data[,-2] <- sapply(meanstd.data[,-2], as.numeric)
colnames(meanstd.data) <- c("Subject", "Activity", features[,2][meanstd.id])
library(reshape2)
data.long <- melt(meanstd.data, id.var=c("Subject", "Activity"),
variable.name="variable", value.name="score")
ave.data <- dcast(data.long, Subject + Activity ~ variable, mean, value.var="score")
write.table(ave.data, "./data/result_ave.csv", sep=",", row.names=FALSE)
dim(ave.data)
