if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
q12
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
n1
is.na(n1)
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
za
zb
std.drv0
q12
effect.size
n1.n0
rm(list=ls())
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
q12
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
std.drv0
za + zb
library(ggplot2)
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.error1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
power.b <- pnorm(qnorm(0.05), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate")
} else{
cat("Power :", power.b, "- inadequate")
}
b
std.err0
std.drv0
std.drv1
n0
n1
power.b
qnorm(0.05)
qnorm(0.05, lower.tail=FALSE)
a
two.sided
qnorm(a/two.sided, lower.tail=FALSE)
pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
mu1
std.err1
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate")
} else{
cat("Power :", power.b, "- inadequate")
}
cat("abc")
cat("abc\n")
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
b
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 130;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 130;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
mu1
std.err1
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
knitr::opts_chunk$set(echo=FALSE, fig.align = "center", message=FALSE, warning=FALSE, cache=TRUE)
library(shiny)
shinyUI(fluidPage(
titlePanel("Sample size, Power calculation - 2 dichotomous groups(t-test)"),
sidebarLayout(
sidebarPanel(
h3("Statistical parameters"),
sliderInput("a", "alpha:", min=0.001, max=1, value=0.05),
sliderInput("b", "beta:", min=0, max=1, value=0.2),
h3("Distribution parameters"),
numericInput("mu0", "Mean of H0: ", value=0),
numericInput("std.dev0", "Stand dev of H0: ", value=1),
numericInput("std.dev1", "Stand dev of H1: ", value=1),
numericInput("effect.size", "Effect size: ", value=0.5),
numericInput("n1", "sample number(H1): - if determined", value=NULL),
numericInput("n1.n0", "ratio of number(H1/H0): ", value=1),
checkboxInput("one.two", "2 sided test", value=TRUE),
submitButton("Submit")
),
mainPanel(
plotOutput("dispPlot"),
verbatimTextOutput("print.cal.sample.n"),
verbatimTextOutput("print.prov.sample.n"),
verbatimTextOutput("print.power")
)
)
))
library(shiny);  library(ggplot2)
shinyServer(function(input, output) {
mu1 <- reactive({ input$mu0 + input$effect.size })
two.sided <- reactive({
if(input$one.two == TRUE){ 2 } else{ 1 }
})
za <- reactive({ qnorm(input$a/two.sided(), lower.tail=FALSE) })
zb <- reactive({ qnorm(input$b, lower.tail=FALSE) })
q12 <- reactive({
if(input$n1.n0 >= 1){ 1 + 1/input$n1.n0 } else{ 1 + input$n1.n0 }
})
est.sample.size <- reactive({
( (za() + zb())^2 * input$std.dev0^2 * q12() ) / (input$effect.size^2)
})
n1.new <- reactive({
if(is.na(input$n1)){ est.sample.size() } else{ input$n1 }
})
n0 <- reactive({ n1.new()/input$n1.n0 })
std.err0 <- reactive({ input$std.dev0/sqrt(n0()/2) })
std.err1 <- reactive({ input$std.dev1/sqrt(n1.new()/2) })
power.b <- reactive({
pnorm( qnorm(input$a/two.sided(), mean=input$mu0, sd=std.err0(), lower.tail=FALSE),
mean=mu1(), sd=std.err1(), lower.tail=FALSE)
})
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='0zhbiQTbLDfBsQmB6AN3xrFJyYoEubCPV0Uc52Cw')
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
?iris
?devtools
??devtools
library(devtools)
install.packages("devtools")
library(devtools)
?aes
?install_github
session.info()
sessioninfo()
SESSIONINFO()
session_info()
install.packages("KernSmooth")
library(KernSmooth)
sessionInfo()
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
#workingpath <- "C:\\Users\\pc\\Desktop\\Jihan\\GCD"
setwd(workingpath)
##### Problem 3 #####
fileURL31 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileURL32 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL31, "./data/GDP.csv", method="curl")
download.file(fileURL32, "./data/edu.csv", method="curl")
GDP <- read.csv("./data/GDP.csv", header=TRUE, skip=4, colClasses="character")
GDP <- GDP[, c(1, 2, 4, 5)]
names(GDP) <- c("CountryCode", "ranking", "Long.Name", "USD")
GDP$USD <- as.numeric(gsub(",", "", GDP$USD))
GDP$ranking <- as.numeric(GDP$ranking)
summary(GDP$ranking)
GDP <- read.csv("./data/GDP.csv", header=TRUE, skip=4, colClasses="character")
GDP <- GDP[, c(1, 2, 4, 5)]
names(GDP) <- c("CountryCode", "ranking", "Long.Name", "USD")
summary(GDP$ranking)
GDP$USD <- as.numeric(gsub(",", "", GDP$USD))
GDP$ranking <- as.numeric(GDP$ranking)
edu <- read.csv("./data/edu.csv", header=TRUE)
mergedData <- merge(GDP, edu, by="CountryCode")
merg.sort <- mergedData[order(mergedData$USD),]
dim(merg.sort)
merg.sort$Long.Name.x[13]
library(dplyr)
join.data <- inner_join(GDP, edu, by="CountryCode")
join.sort <- join.data[order(join.data$USD),]
dim(join.sort)
join.sort$Long.Name.x[13]
##### Problem 4 #####
library(dplyr)
merg.sort %>%
group_by(Income.Group) %>%
# summarise(ave=mean(ranking, na.rm=TRUE))
# High income OECD 33 / HIghincome nonOECD 91.9
##### Problem 5 #####
library(Hmisc)
merg.sort %>%
group_by(Income.Group) %>%
summarise(ave=mean(ranking, na.rm=TRUE))
?quantile
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2))
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)[1]
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)[2]
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)[3]
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)[4]
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)[5]
quantile(merg.sort$ranking, probs=seq(from=0, to=1, by=0.2), na.rm=TRUE)[6]
length(merg.sort$ranking)
summary(merg.sort$ranking)
library(Hmisc)
cut2(merg.sort$ranking, g=5)
?cut2
str(merg.sort)
str(merg.sort$ranking)
merg.rank <- merg.sort[order(merg.sort$ranking),]
cut2(merg.rank$ranking, g=5)
table(cut2(merg.sort$ranking, g=5))
names(merg.sort)
table(cut2(merg.rank$ranking, g=5), merg.rank$Income.Group)
cut2(merg.rank$ranking, g=5)
table(cut2(merg.rank$ranking, g=5))
table(cut2(merg.rank$ranking, g=5), merg.rank$Income.Group)
a <- table(cut2(merg.rank$ranking, g=5), merg.rank$Income.Group)
rowsum(a)
a
class(a)
fowsum
rowsum
rowsum(a)
?strsplit
##### Problem 1 #####
fileURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
if(!file.exists("data") & !file.exists("./data/prob1.csv")){
dir.create("data")
}
download.file(fileURL1, "./data/prob1.csv", method="curl")
prob1.data <- read.csv("./data/prob1.csv", header=TRUE)
dim(prob1.data)
names(prob1.data)
##### Problem 1 #####
fileURL1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
if(!file.exists("data") & !file.exists("./data/prob1.csv")){
dir.create("data")
}
download.file(fileURL1, "./data/prob1.csv", method="curl")
prob1.data <- read.csv("./data/prob1.csv", header=TRUE)
splitNames <- strsplit(names(prob1.data), "\\.")
splitNames[[123]]
splitNames <- strsplit(names(prob1.data), "\\wgtp")
splitNames[[123]]
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("data") & !file.exists("./data/prob2.csv")){
dir.create("data")
}
download.file(fileURL1, "./data/prob2.csv", method="curl")
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
GDP <- GDP[, c(1, 2, 4, 5)]
names(GDP) <- c("CountryCode", "ranking", "Long.Name", "USD")
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
dim(prob2.data)
head(prob2.data, 3)
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("data") & !file.exists("./data/prob2.csv")){
dir.create("data")
}
download.file(fileURL1, "./data/prob2.csv", method="curl")
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
rm(list=ls())
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("data") & !file.exists("./data/prob2.csv")){
dir.create("data")
}
download.file(fileURL1, "./data/prob2.csv", method="curl")
fileURL2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if(!file.exists("data") & !file.exists("./data/prob2.csv")){
dir.create("data")
}
download.file(fileURL2, "./data/prob2.csv", method="curl")
a <- read.csv("./data/prob2.csv", header=TRUE)
head(a, 3)
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
GDP <- GDP[, c(1, 2, 4, 5)]
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
prob2.data <- prob2.data[, c(1, 2, 4, 5)]
names(prob2.data) <- c("CountryCode", "ranking", "Long.Name", "USD")
prob2.data$USD <- as.numeric(gsub(",", "", prob2.data$USD))
mean(prob2.data$USD, na.rm=TRUE)
?gsub
head(prob2.data)
a <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
head(a)
prob2.data <- read.csv("./data/GDP.csv", header=TRUE, skip=4, colClasses="character")
prob2.data <- prob2.data[, c(1, 2, 4, 5)]
names(prob2.data) <- c("CountryCode", "ranking", "Long.Name", "USD")
prob2.data$USD <- as.numeric(gsub(",", "", prob2.data$USD))
mean(prob2.data$USD, na.rm=TRUE)
head(prob2.data)
mean(prob2.data[1:190,]$USD, na.rm=TRUE)\
mean(prob2.data[1:190,]$USD, na.rm=TRUE)
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
prob2.data <- prob2.data[, c(1, 2, 4, 5)]
names(prob2.data) <- c("CountryCode", "ranking", "Long.Name", "USD")
prob2.data$USD <- as.numeric(gsub(",", "", prob2.data$USD))
mean(prob2.data[1:190,]$USD, na.rm=TRUE)
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
head(prob2.data)
grep("^United", prob2.datacountryNames)
prob2.data <- read.csv("./data/prob2.csv", header=TRUE, skip=4, colClasses="character")
prob2.data <- prob2.data[, c(1, 2, 4, 5)]
names(prob2.data) <- c("CountryCode", "ranking", "countryNames", "USD")
prob2.data$USD <- as.numeric(gsub(",", "", prob2.data$USD))
mean(prob2.data[1:190,]$USD, na.rm=TRUE)
##### Problem 3 #####
grep("^United", prob2.datacountryNames)
##### Problem 3 #####
grep("^United", prob2.data$countryNames)
##### Problem 3 #####
grep("^United", prob2.data$countryNames)
grep("United$", prob2.data$countryNames)
grep("*United", prob2.data$countryNames)
##### Problem 4 #####
fileURL41 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
fileURL42 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
if(!file.exists("data")){
dir.create("data")
}
download.file(fileURL41, "./data/GDP.csv", method="curl")
download.file(fileURL42, "./data/edu.csv", method="curl")
GDP <- read.csv("./data/GDP.csv", header=TRUE, colClasses="character")
edu <- read.csv("./data/edu.csv", header=TRUE, colClasses="character")
dim(GDP)
dim(edu)
names(GDP)
head(GDP)
head(edu)
library(dplyr)
join.data <- inner_join(GDP, edu, by="CountryCode")
head(GTP)
head(GDP)
GDP <- read.csv("./data/GDP.csv", header=TRUE, colClasses="character")
GDP <- GDP[, c(1, 2, 4, 5)]
names(GDP) <- c("CountryCode", "ranking", "Long.Name", "USD")
GDP$USD <- as.numeric(gsub(",", "", GDP$USD))
GDP$ranking <- as.numeric(GDP$ranking)
head(GDP)
head(edu$CountryCode)
library(dplyr)
join.data <- inner_join(GDP, edu, by="CountryCode")
dim(join.data)
head(join.data)
names(join.data)
head(join.data$Special.Notes)
grep("[a-z]", letters)
letters
grep("[a-z]", letters)
txt <- c("arm","foot","lefroo", "bafoobar")
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
i # 2 and 4
txt[i]
grepl
grepl("^Fiscal year", join.data$Special.Notes)
grepl("^Fiscal year end: June", join.data$Special.Notes)
join.data$Special.Notes[grepl("^Fiscal year end: June", join.data$Special.Notes)]
sum(grepl("^Fiscal year end: June", join.data$Special.Notes))
library(quantmod)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sum(grepl("^2012", sampleTimes))
