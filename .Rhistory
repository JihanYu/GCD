fillColor="transparent")
library(plotly)
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter")
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=as.factor(cyl))
head(mtcars)
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=as.factor(mtcars$cyl))
str(mtcars)
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=disp)
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=mtcars$disp)
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=~factor(cyl), size=~hp)
set.seed(2016-07-21)
temp <- rnorm(100, mean=30, sd=5)
pressure <- rnorm(100)
dtime <- 1:100
plot_ly(x=~temp, y=~pressure, z=~dtime, type="scatter3d", color=~temp)
data("airmiles")
plot_ly(x=~time(airmiles), y=~airmiles, type="scatter")
plot_ly(mtcars, x=wt, y=mpg, mode="markers")
?plot_ly
plot_ly(mtcars, x=~wt, y=~mpg, mode="markers")
plot_ly(mtcars, x = wt, y = mpg, mode="markers", color = as.factor(cyl))
plot_ly(mtcars, x = wt, y = mpg, mode="markers", color = as.factor(mtcars$cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, mode="markers", color = as.factor(~cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, mode="markers", color = as.factor(mtcars$cyl))
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=~disp)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode="markers", color = ~factor(cyl))
plot_ly(mtcars, x=~wt, y=~mpg, type="scatter", color=~factor(cyl), size=~hp)
plot_ly(x=~time(airmiles), y=~airmiles)
plot_ly(x=~time(airmiles), y=~airmiles, type="line")
library(plotly)
library(tidyr)
library(dplyr)
data("EuStockMarkets")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time=rep(time(EuStockMarkets), 4))
plot_ly(stocks, x=~time, y=~price, color=~index)
plot_ly(x=~time(airmiles), y=~airmiles, type="scattergl")
plot_ly(x=~time(airmiles), y=~airmiles, type="scatterpolargl")
plot_ly(x = ~precip, type="histogram")
plot_ly(x=~time(airmiles), y=~airmiles, type="scatter", mode="lines")
data("airmiles")
plot_ly(x=~time(airmiles), y=~airmiles, type="scatter", mode="lines")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time=rep(time(EuStockMarkets), 4))
plot_ly(stocks, x=~time, y=~price, color=~index)
plot_ly(stocks, x=~time, y=~price, color=~index, type="scatter", mode="lines")
plot_ly(iris, y=~Petal.Length, color=~Species, type="box")
terrain1 <- matrix(rnorm(100*100), nrow=100, ncol=100)
plot_ly(z=~terrain1, type="heatmap")
terrain2 <- matrix(sort(rnorm(100*100)), nrow=100, ncol=100)
plot_ly(z=~terrain2, type="surface")
library(slidify)
library(slidy)
install.packages("slidy")
library(ggplot2)
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
sample.size <- NULL
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
x.inter <- qnorm(a/two.sided, lower.tail=FALSE)
x <- seq(from = mu0 - 5*std.drv0, to = mu1 + 5*std.drv1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.drv0)
h1 <- dnorm(x, mean=mu1, sd=std.drv1)
h.norm <- data.frame(x, h0, h1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=x.inter) +
geom_ribbon(data=subset(h.norm, x.inter <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= x.inter),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
std.err0
?dnorm
pnorm(qnorm(0.05), lower.tail=FALSE)
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
if(is.na(n1)){
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
x.inter <- qnorm(a/two.sided, lower.tail=FALSE)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=x.inter) +
geom_ribbon(data=subset(h.norm, x.inter <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= x.inter),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
library(ggplot2)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=x.inter) +
geom_ribbon(data=subset(h.norm, x.inter <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= x.inter),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
pnorm(qnorm(0.05), mean=1, sd=2, lower.tail=FALSE)
a <- "abc"
print(a)
cat(a)
cat(a, "%c", "def")
cat(a, "def")
?cat
pnorm(0.05)
pnorm(0.025)
qnorm(0.025)
qnorm(0.025, lower.tail=FALSE)
qnorm(0.2)
qnorm(0.2, lower.tail=FALSE)
rm(list=ls())
library(ggplot2)
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
za
zb
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
q12
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
n1
is.na(n1)
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
za
zb
std.drv0
q12
effect.size
n1.n0
rm(list=ls())
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
q12
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
std.drv0
za + zb
library(ggplot2)
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 30;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 < 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.error1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
( (za + zb)^2 * std.drv0 * (q12)^2 ) / (effect.size^2)
power.b <- pnorm(qnorm(0.05), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate")
} else{
cat("Power :", power.b, "- inadequate")
}
b
std.err0
std.drv0
std.drv1
n0
n1
power.b
qnorm(0.05)
qnorm(0.05, lower.tail=FALSE)
a
two.sided
qnorm(a/two.sided, lower.tail=FALSE)
pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
mu1
std.err1
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate")
} else{
cat("Power :", power.b, "- inadequate")
}
cat("abc")
cat("abc\n")
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
b
a <- 0.05;  b <- 0.2
effect.size <- 5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 130;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
a <- 0.05;  b <- 0.2
effect.size <- 0.5
mu0 <- 0;  std.drv0 <- 1
mu1 <- mu0 + effect.size;  std.drv1 <- 1
one.two <- TRUE
n1 <- 130;  n1.n0 <- 1;
two.sided <- 1;  if(one.two == TRUE) two.sided <- 2
za <- qnorm(a/two.sided, lower.tail=FALSE)
zb <- qnorm(b, lower.tail=FALSE)
q12 <- NULL
if(n1.n0 >= 1){
q12 <- 1 + 1/n1.n0
} else {
q12 <- 1 + n1.n0
}
if(is.na(n1)){
n1 <- ( (za + zb)^2 * std.drv0^2 * (q12)^2 ) / (effect.size^2)
}
n0 <- n1/n1.n0
std.err0 <- std.drv0 / sqrt(n0/2)
std.err1 <- std.drv1 / sqrt(n1/2)
x <- seq(from = mu0 - 5*std.err0, to = mu1 + 5*std.err1, by=0.01)
h0 <- dnorm(x, mean=mu0, sd=std.err0)
h1 <- dnorm(x, mean=mu1, sd=std.err1)
h.norm <- data.frame(x, h0, h1)
a.h0 <- qnorm(a/two.sided, mean=mu0, sd=std.err0, lower.tail=FALSE)
b.h1 <- qnorm(b, mean=mu1, sd=std.err1)
p <- ggplot(h.norm, aes(x=x, y=h0)) +
geom_line(aes(x=x, y=h0), color="red") +
geom_line(aes(x=x, y=h1), color="blue") +
geom_vline(xintercept=a.h0) +
geom_vline(xintercept=b.h1) +
geom_ribbon(data=subset(h.norm, a.h0 <= x & x <= max(x)),
aes(ymin=0, ymax=h0, fill="H0", alpha=0.5)) +
geom_ribbon(data=subset(h.norm, min(x) <= x & x <= a.h0),
aes(ymin=0, ymax=h1, fill="H1", alpha=0.5))
print(p)
power.b <- pnorm(qnorm(a/two.sided, lower.tail=FALSE), mean=mu1, sd=std.err1, lower.tail=FALSE)
if (power.b >= (1-b)){
cat("Power :", power.b, "- adequate\n")
} else{
cat("Power :", power.b, "- inadequate\n")
}
mu1
std.err1
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
knitr::opts_chunk$set(echo=FALSE, fig.align = "center", message=FALSE, warning=FALSE, cache=TRUE)
library(shiny)
shinyUI(fluidPage(
titlePanel("Sample size, Power calculation - 2 dichotomous groups(t-test)"),
sidebarLayout(
sidebarPanel(
h3("Statistical parameters"),
sliderInput("a", "alpha:", min=0.001, max=1, value=0.05),
sliderInput("b", "beta:", min=0, max=1, value=0.2),
h3("Distribution parameters"),
numericInput("mu0", "Mean of H0: ", value=0),
numericInput("std.dev0", "Stand dev of H0: ", value=1),
numericInput("std.dev1", "Stand dev of H1: ", value=1),
numericInput("effect.size", "Effect size: ", value=0.5),
numericInput("n1", "sample number(H1): - if determined", value=NULL),
numericInput("n1.n0", "ratio of number(H1/H0): ", value=1),
checkboxInput("one.two", "2 sided test", value=TRUE),
submitButton("Submit")
),
mainPanel(
plotOutput("dispPlot"),
verbatimTextOutput("print.cal.sample.n"),
verbatimTextOutput("print.prov.sample.n"),
verbatimTextOutput("print.power")
)
)
))
library(shiny);  library(ggplot2)
shinyServer(function(input, output) {
mu1 <- reactive({ input$mu0 + input$effect.size })
two.sided <- reactive({
if(input$one.two == TRUE){ 2 } else{ 1 }
})
za <- reactive({ qnorm(input$a/two.sided(), lower.tail=FALSE) })
zb <- reactive({ qnorm(input$b, lower.tail=FALSE) })
q12 <- reactive({
if(input$n1.n0 >= 1){ 1 + 1/input$n1.n0 } else{ 1 + input$n1.n0 }
})
est.sample.size <- reactive({
( (za() + zb())^2 * input$std.dev0^2 * q12() ) / (input$effect.size^2)
})
n1.new <- reactive({
if(is.na(input$n1)){ est.sample.size() } else{ input$n1 }
})
n0 <- reactive({ n1.new()/input$n1.n0 })
std.err0 <- reactive({ input$std.dev0/sqrt(n0()/2) })
std.err1 <- reactive({ input$std.dev1/sqrt(n1.new()/2) })
power.b <- reactive({
pnorm( qnorm(input$a/two.sided(), mean=input$mu0, sd=std.err0(), lower.tail=FALSE),
mean=mu1(), sd=std.err1(), lower.tail=FALSE)
})
runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='<SECRET>')
rsconnect::setAccountInfo(name='jihanyu',
token='467706F8E24924114CC674C95D925950',
secret='0zhbiQTbLDfBsQmB6AN3xrFJyYoEubCPV0Uc52Cw')
shiny::runApp('C:/Users/MED1/Desktop/Coursera/project/DDP')
?iris
?devtools
??devtools
library(devtools)
install.packages("devtools")
library(devtools)
?aes
?install_github
session.info()
sessioninfo()
SESSIONINFO()
session_info()
install.packages("KernSmooth")
library(KernSmooth)
sessionInfo()
workingpath <- "C:\\Users\\MED1\\Desktop\\Coursera\\project\\GCD"
setwd(workingpath)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(BiocManager)
BiocManager::valid()
BiocManager::install(rhdf5)
BiocManager::install("rhdf5")
library(rhdf5)
created <- h5createFile("example.h5")
created
created <- h5createGroup("example.h5", "foo")
created <- h5createGroup("example.h5", "baa")
created <- h5createGroup("example.h5", "foo/foobaa")
h5ls("example.h5")
A <- matrix(1:10, nr=5, nc=2)
h5write(A, "example.h5", "foo/A")
B <- array(seq(0.1, 2.0, by=0.1), dim=c(5, 2, 2))
attr(B, "scale") <- "liter"
A
B
h5write(B, "example.h5", "foo/foobaa/B")
B
h5ls("example.h5")
df <- data.frame(1L:5L, seq(0, 1, length.out=5))
df
df <- data.frame(1L:5L, seq(0, 1, length.out=5),
c("ad", "cde", "fghi", "a", "s"), stringAsFactors=FALSE)
df
readA <- h5read("example.h5", "foo/A")
readB <- h5read("example.h5", "foo/foobaa/B")
readdf <- h5read("example.h5", "df")
df <- data.frame(1L:5L, seq(0, 1, length.out=5),
c("ad", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
df
str(df)
df <- data.frame(1L:5L, seq(0, 1, length.out=5),
c("ad", "cde", "fghi", "a", "s"), stringsAsFactors=FALSE)
h5write(df, "example.h5", "df")
h5ls("example.h5")
readA <- h5read("example.h5", "foo/A")
readB <- h5read("example.h5", "foo/foobaa/B")
readdf <- h5read("example.h5", "df")
readA
h5write(c(12, 13, 14), "example.h5", "foo/A", index=list(1:3, 1))
h5read("example.h5", "foo/A")
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode <- readLine(con)
htmlCode <- readLines(con)
close(con)
htmlCode
con <- url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
html <- htmlTreeParse(url, useInternalNodes=T)
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
con <- url("https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=ko&oi=ao")
htmlCode <- readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
url <- "https://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=ko&oi=ao"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
